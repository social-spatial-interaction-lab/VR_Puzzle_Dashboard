[{"name":"app.r","content":"library(shiny)\r\nlibrary(shinydashboard)\r\nlibrary(tidyverse)\r\nlibrary(ggplot2)\r\nlibrary(lubridate)\r\nlibrary(DT)\r\nlibrary(stringr)\r\nlibrary(purrr)\r\n\r\n# Define UI with several tabs to reflect the R Markdown outputs\r\nui <- dashboardPage(\r\n  dashboardHeader(title = \"VR Puzzle Analysis Dashboard\"),\r\n  dashboardSidebar(\r\n    sidebarMenu(\r\n      menuItem(\"Raw Data\", tabName = \"raw\", icon = icon(\"table\")),\r\n      menuItem(\"Demographics\", tabName = \"demo\", icon = icon(\"users\")),\r\n      menuItem(\"Duration Analysis\", tabName = \"duration\", icon = icon(\"clock\")),\r\n      menuItem(\"Condition Comparison\", tabName = \"conditions\", icon = icon(\"balance-scale\")),\r\n      menuItem(\"Controller Metrics\", tabName = \"controllers\", icon = icon(\"gamepad\")),\r\n      menuItem(\"Rotational Analysis\", tabName = \"rotation\", icon = icon(\"sync\"))\r\n    ),\r\n    # In some plots we filter by age and also by participant\r\n    selectInput(\"participant\", \"Select Participant:\", choices = NULL),\r\n    sliderInput(\"ageRange\", \"Age Range:\",\r\n                min = 19, max = 32, value = c(19, 32))\r\n  ),\r\n  \r\n  dashboardBody(\r\n    tabItems(\r\n      # Demographics Tab\r\n      tabItem(tabName = \"demo\",\r\n              fluidRow(\r\n                box(plotOutput(\"demoPlot1\"), width = 6),\r\n                box(plotOutput(\"demoPlot2\"), width = 6)\r\n              )\r\n      ),\r\n      \r\n      # Duration Analysis Tab\r\n      tabItem(tabName = \"duration\",\r\n              fluidRow(\r\n                box(plotOutput(\"durationDist\"), width = 12)\r\n              )\r\n      ),\r\n      \r\n      # Condition Comparison Tab – using a tabBox with three sub-tabs\r\n      tabItem(tabName = \"conditions\",\r\n              tabBox(width = 12,\r\n                     tabPanel(\"One-step Movement\", plotOutput(\"conditionOneStepPlot\")),\r\n                     tabPanel(\"Two-step Movement\", plotOutput(\"conditionTwoStepPlot\")),\r\n                     tabPanel(\"Overall Conditions\", plotOutput(\"overallConditionPlot\"))\r\n              )\r\n      ),\r\n      \r\n      # Controller Metrics Tab – overall controller speed plots\r\n      tabItem(tabName = \"controllers\",\r\n              tabBox(width = 12,\r\n                     tabPanel(\"Left Controller Speed\", plotOutput(\"leftControllerSpeedPlot\")),\r\n                     tabPanel(\"Right Controller Speed\", plotOutput(\"rightControllerSpeedPlot\"))\r\n              )\r\n      ),\r\n      \r\n      # Rotational Analysis Tab – condition‐specific rotational speed plots for left/right controllers\r\n      tabItem(tabName = \"rotation\",\r\n              tabBox(width = 12,\r\n                     tabPanel(\"Left Controller Rotation\",\r\n                              fluidRow(\r\n                                box(plotOutput(\"leftRotationOneStepPlot\"), width = 6),\r\n                                box(plotOutput(\"leftRotationTwoStepPlot\"), width = 6)\r\n                              )),\r\n                     tabPanel(\"Right Controller Rotation\",\r\n                              fluidRow(\r\n                                box(plotOutput(\"rightRotationOneStepPlot\"), width = 6),\r\n                                box(plotOutput(\"rightRotationTwoStepPlot\"), width = 6)\r\n                              ))\r\n              )\r\n      ),\r\n      \r\n      # Raw Data Tab\r\n      tabItem(tabName = \"raw\",\r\n              fluidRow(\r\n                box(DT::dataTableOutput(\"rawDataTable\"), width = 12)\r\n              )\r\n      )\r\n    )\r\n  )\r\n)\r\n\r\n# Server Logic\r\nserver <- function(input, output, session) {\r\n  \r\n  # Set your main directory (adjust the path as needed; note the PDF used \"D:/IIT/PuzzleProject/restructuredDataset\")\r\n  main_directory <- \"C:\\\\Users\\\\tusha\\\\Downloads\\\\PuzzleProjectBIDS\\\\PuzzleProjectBIDS\"\r\n  \r\n  # Load all participants (do not filter yet)\r\n  all_participants <- reactive({\r\n    read_tsv(file.path(main_directory, \"participants.tsv\"), show_col_types = FALSE)\r\n  })\r\n  \r\n  # Separate anomaly participants and non-anomalies\r\n  anomaly_data <- reactive({\r\n    all_participants() %>% filter(Anomaly == \"Yes\")\r\n  })\r\n  \r\n  participants_data <- reactive({\r\n    all_participants() %>% \r\n      filter(Anomaly == \"No\") %>%\r\n      filter(between(Age, input$ageRange[1], input$ageRange[2]))\r\n  })\r\n  \r\n  # Update participant select input based on non-anomalous participants\r\n  observe({\r\n    updateSelectInput(session, \"participant\", choices = unique(participants_data()$participant_id))\r\n  })\r\n  \r\n  # Load Main Log data (combining all _events.tsv files)\r\n  MainLog <- reactive({\r\n    log_files <- list.files(main_directory, pattern = \"\\\\_events.tsv$\", recursive = TRUE, full.names = TRUE)\r\n    map_df(log_files, ~ {\r\n      subject_id <- str_extract(.x, \"sub-\\\\w+\")\r\n      read_tsv(.x, col_types = cols()) %>% \r\n        mutate(participant_id = subject_id)\r\n    })\r\n  })\r\n  \r\n  # Load motion data for Left and Right Controllers\r\n  LeftControllerData <- reactive({\r\n    files <- list.files(main_directory, pattern = \"LeftControllerMovement_motion.tsv$\", recursive = TRUE, full.names = TRUE)\r\n    if(length(files)==0) return(tibble())\r\n    map_df(files, function(f) {\r\n      subject_id <- str_extract(f, \"sub-\\\\w+\")\r\n      read_tsv(f, col_types = cols()) %>% mutate(participant_id = subject_id)\r\n    })\r\n  })\r\n  \r\n  RightControllerData <- reactive({\r\n    files <- list.files(main_directory, pattern = \"RightControllerMovement_motion.tsv$\", recursive = TRUE, full.names = TRUE)\r\n    if(length(files)==0) return(tibble())\r\n    map_df(files, function(f) {\r\n      subject_id <- str_extract(f, \"sub-\\\\w+\")\r\n      read_tsv(f, col_types = cols()) %>% mutate(participant_id = subject_id)\r\n    })\r\n  })\r\n  \r\n  ## Define condition-specific logs (for conditions 0,1,2,3)\r\n  condition_0_log <- reactive({\r\n    MainLog() %>% filter(trial_type == \"Condition: 0\") %>%\r\n      mutate(participant_number = as.numeric(str_extract(participant_id, \"\\\\d+\"))) %>%\r\n      arrange(participant_number)\r\n  })\r\n  condition_1_log <- reactive({\r\n    MainLog() %>% filter(trial_type == \"Condition: 1\") %>%\r\n      mutate(participant_number = as.numeric(str_extract(participant_id, \"\\\\d+\"))) %>%\r\n      arrange(participant_number)\r\n  })\r\n  condition_2_log <- reactive({\r\n    MainLog() %>% filter(trial_type == \"Condition: 2\") %>%\r\n      mutate(participant_number = as.numeric(str_extract(participant_id, \"\\\\d+\"))) %>%\r\n      arrange(participant_number)\r\n  })\r\n  condition_3_log <- reactive({\r\n    MainLog() %>% filter(trial_type == \"Condition: 3\") %>%\r\n      mutate(participant_number = as.numeric(str_extract(participant_id, \"\\\\d+\"))) %>%\r\n      arrange(participant_number)\r\n  })\r\n  \r\n  # For the duration plot, compute min, max, avg durations\r\n  min_duration <- reactive({ min(participants_data()$duration, na.rm = TRUE) })\r\n  max_duration <- reactive({ max(participants_data()$duration, na.rm = TRUE) })\r\n  avg_duration <- reactive({ mean(participants_data()$duration, na.rm = TRUE) })\r\n  \r\n  ## ---- Functions from the R Markdown file ----\r\n  \r\n  # Function to calculate speed in a given time interval (for condition-specific analysis)\r\n  calculate_speed_in_interval <- function(motion_data, start_time, end_time) {\r\n    interval_data <- motion_data %>%\r\n      filter(time >= start_time, time <= end_time) %>%\r\n      mutate(\r\n        delta_t = time - lag(time),\r\n        delta_x = pos_x - lag(pos_x),\r\n        delta_y = pos_y - lag(pos_y),\r\n        delta_z = pos_z - lag(pos_z),\r\n        speed = sqrt(delta_x^2 + delta_y^2 + delta_z^2) / delta_t\r\n      ) %>%\r\n      filter(!is.na(speed) & delta_t > 0)\r\n    round(mean(interval_data$speed, na.rm = TRUE), 4)\r\n  }\r\n  \r\n  # Function to normalize quaternions (from rotation data in degrees)\r\n  normalize_quaternion <- function(x, y, z) {\r\n    x <- x * pi / 180\r\n    y <- y * pi / 180\r\n    z <- z * pi / 180\r\n    qx = sin(x / 2) * cos(y / 2) * cos(z / 2) - cos(x / 2) * sin(y / 2) * sin(z / 2)\r\n    qy = cos(x / 2) * sin(y / 2) * cos(z / 2) + sin(x / 2) * cos(y / 2) * sin(z / 2)\r\n    qz = cos(x / 2) * cos(y / 2) * sin(z / 2) - sin(x / 2) * sin(y / 2) * cos(z / 2)\r\n    qw = cos(x / 2) * cos(y / 2) * cos(z / 2) + sin(x / 2) * sin(y / 2) * sin(z / 2)\r\n    tibble(w = qw, x = qx, y = qy, z = qz)\r\n  }\r\n  \r\n  # Function to calculate angular speed given two quaternion values\r\n  calculate_angular_speed <- function(q1, q2) {\r\n    q1_inv <- tibble(w = q1$w, x = -q1$x, y = -q1$y, z = -q1$z)\r\n    delta_w <- q1_inv$w * q2$w - q1_inv$x * q2$x - q1_inv$y * q2$y - q1_inv$z * q2$z\r\n    delta_w <- pmin(pmax(delta_w, -1), 1)\r\n    theta <- 2 * acos(delta_w)\r\n    angular_speed <- theta * (180 / pi)\r\n    angular_speed\r\n  }\r\n  \r\n  # Function to calculate average rotational speed in a time interval\r\n  calculate_rotational_speed_in_interval <- function(motion_data, start_time, end_time) {\r\n    interval_data <- motion_data %>%\r\n      filter(time >= start_time & time <= end_time) %>%\r\n      mutate(\r\n        delta_t = time - lag(time),\r\n        lag_rot_x = lag(rot_x),\r\n        lag_rot_y = lag(rot_y),\r\n        lag_rot_z = lag(rot_z)\r\n      ) %>%\r\n      filter(!is.na(delta_t) & delta_t > 0)\r\n    q1 <- normalize_quaternion(interval_data$lag_rot_x, interval_data$lag_rot_y, interval_data$lag_rot_z)\r\n    q2 <- normalize_quaternion(interval_data$rot_x, interval_data$rot_y, interval_data$rot_z)\r\n    rotational_speeds <- calculate_angular_speed(q1, q2) / interval_data$delta_t\r\n    avg_rotational_speed <- mean(rotational_speeds, na.rm = TRUE)\r\n    avg_rotational_speed\r\n  }\r\n  \r\n  ## ---------------- Demographics ----------------\r\n  # Plot 1: Participants by Race and Gender (using the color scheme from the PDF)\r\n  output$demoPlot1 <- renderPlot({\r\n    summary_data <- participants_data() %>%\r\n      group_by(Race, Gender) %>%\r\n      summarise(Count = n(), .groups = \"drop\")\r\n    ggplot(summary_data, aes(x = Race, y = Count, fill = Gender)) +\r\n      geom_bar(stat = \"identity\", position = \"stack\") +\r\n      scale_fill_manual(values = c(\"Male\" = \"skyblue\", \"Female\" = \"pink\", \"Non-binary\" = \"yellow\")) +\r\n      theme_minimal() +\r\n      labs(title = \"Participants by Race and Gender\",\r\n           x = \"Race\",\r\n           y = \"Number of Participants\",\r\n           fill = \"Gender\") +\r\n      theme(axis.text.x = element_text(angle = 45, hjust = 1))\r\n  })\r\n  \r\n  # Plot 2: Age Distribution Histogram\r\n  output$demoPlot2 <- renderPlot({\r\n    ggplot(participants_data(), aes(x = Age)) +\r\n      geom_histogram(fill = \"lightgreen\", bins = 10, color = \"black\") +\r\n      theme_minimal() +\r\n      labs(title = \"Age Distribution\",\r\n           x = \"Age\",\r\n           y = \"Count\")\r\n  })\r\n  \r\n  ## ---------------- Duration Analysis ----------------\r\n  output$durationDist <- renderPlot({\r\n    # Convert duration from seconds to minutes for plotting and annotation\r\n    ggplot(participants_data(), aes(x = duration/60)) +\r\n      geom_histogram(binwidth = 55/60, fill = \"skyblue\", color = \"black\") +\r\n      labs(title = \"Distribution of Experiment Durations in Minutes\",\r\n           subtitle = paste(nrow(participants_data()), \"Participants\"),\r\n           x = \"Duration (Minutes)\", y = \"Count\") +\r\n      geom_vline(xintercept = min_duration()/60, linetype = \"dashed\") +\r\n      geom_vline(xintercept = max_duration()/60, linetype = \"dashed\") +\r\n      geom_vline(xintercept = avg_duration()/60, linetype = \"solid\") +\r\n      annotate(\"text\", x = min_duration()/60, y = 5, label = paste(\"Min:\", round(min_duration()/60, 2)), angle = 90, vjust = -0.5) +\r\n      annotate(\"text\", x = max_duration()/60, y = 5, label = paste(\"Max:\", round(max_duration()/60, 2)), angle = 90, vjust = -0.5) +\r\n      annotate(\"text\", x = avg_duration()/60, y = 5, label = paste(\"Avg:\", round(avg_duration()/60, 2)), angle = 90, vjust = -0.5) +\r\n      theme_minimal()\r\n  })\r\n  \r\n  ## ---------------- Condition Comparison ----------------\r\n  # One-step Movement (Conditions 0 & 2)\r\n  output$conditionOneStepPlot <- renderPlot({\r\n    combined_data <- bind_rows(\r\n      condition_0_log() %>% mutate(condition = \"Condition 0\"),\r\n      condition_2_log() %>% mutate(condition = \"Condition 2\")\r\n    ) %>% select(participant_number, duration, condition)\r\n    combined_data$condition <- factor(combined_data$condition, levels = c(\"Condition 0\", \"Condition 2\"))\r\n    line_colors <- combined_data %>%\r\n      pivot_wider(names_from = condition, values_from = duration) %>%\r\n      mutate(color_flag = ifelse(`Condition 0` > `Condition 2`, \"highlight\", \"normal\")) %>%\r\n      select(participant_number, color_flag)\r\n    combined_data <- left_join(combined_data, line_colors, by = \"participant_number\")\r\n    ggplot(combined_data, aes(x = condition, y = duration, group = participant_number)) +\r\n      geom_line(aes(color = color_flag)) +\r\n      geom_point(aes(color = color_flag), size = 2) +\r\n      stat_summary(fun = mean, geom = \"point\", aes(group = 1), size = 5, color = \"red\") +\r\n      scale_color_manual(values = c(\"highlight\" = \"red\", \"normal\" = \"black\")) +\r\n      scale_x_discrete(labels = c(\"Condition 0\" = \"One-step without clutter\",\r\n                                  \"Condition 2\" = \"One-step with clutter\")) +\r\n      labs(title = \"Time to Solve Puzzle (One-step Movement)\",\r\n           x = \"Condition\",\r\n           y = \"Time (seconds)\") +\r\n      theme_minimal() +\r\n      theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = \"none\")\r\n  })\r\n  \r\n  # Two-step Movement (Conditions 1 & 3)\r\n  output$conditionTwoStepPlot <- renderPlot({\r\n    combined_data <- bind_rows(\r\n      condition_1_log() %>% mutate(condition = \"Condition 1\"),\r\n      condition_3_log() %>% mutate(condition = \"Condition 3\")\r\n    ) %>% select(participant_number, duration, condition)\r\n    combined_data$condition <- factor(combined_data$condition, levels = c(\"Condition 1\", \"Condition 3\"))\r\n    # Identify outliers from anomaly data\r\n    outliers <- str_extract(anomaly_data()$participant_id, \"\\\\d+\")\r\n    line_colors <- combined_data %>%\r\n      pivot_wider(names_from = condition, values_from = duration) %>%\r\n      mutate(color_flag = ifelse(participant_number %in% as.numeric(outliers), \"highlight\", \"normal\")) %>%\r\n      select(participant_number, color_flag)\r\n    combined_data <- left_join(combined_data, line_colors, by = \"participant_number\")\r\n    ggplot(combined_data, aes(x = condition, y = duration, group = participant_number)) +\r\n      geom_line(aes(color = color_flag)) +\r\n      geom_point(size = 2) +\r\n      stat_summary(fun = mean, geom = \"point\", aes(group = 1), size = 5, color = \"red\") +\r\n      scale_color_manual(values = c(\"highlight\" = \"red\", \"normal\" = \"black\")) +\r\n      scale_x_discrete(labels = c(\"Condition 1\" = \"Two-step without clutter\",\r\n                                  \"Condition 3\" = \"Two-step with clutter\")) +\r\n      labs(title = \"Time to Solve Puzzle (Two-step Movement)\",\r\n           x = \"Condition\",\r\n           y = \"Time (seconds)\") +\r\n      theme_minimal() +\r\n      theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = \"right\")\r\n  })\r\n  \r\n  # Overall Conditions (combining all conditions by clutter and step type)\r\n  output$overallConditionPlot <- renderPlot({\r\n    allConditions <- MainLog() %>%\r\n      mutate(\r\n        clutter_group = case_when(\r\n          trial_type %in% c(\"Condition: 0\", \"Condition: 1\") ~ \"Open\",\r\n          trial_type %in% c(\"Condition: 2\", \"Condition: 3\") ~ \"Cluttered\"\r\n        ),\r\n        step_type = case_when(\r\n          trial_type %in% c(\"Condition: 0\", \"Condition: 2\") ~ \"One Step\",\r\n          trial_type %in% c(\"Condition: 1\", \"Condition: 3\") ~ \"Two Steps\"\r\n        )\r\n      )\r\n    avg_duration_conditions <- allConditions %>%\r\n      group_by(clutter_group, step_type) %>%\r\n      summarise(avg_duration = mean(duration), .groups = \"drop\")\r\n    slope_data <- avg_duration_conditions %>%\r\n      pivot_wider(names_from = clutter_group, values_from = avg_duration) %>%\r\n      rename(WithoutClutter = Open, WithClutter = Cluttered)\r\n    ggplot() +\r\n      geom_point(data = allConditions, aes(x = clutter_group, y = duration, shape = clutter_group, color = step_type), \r\n                 alpha = 0.2, size = 1.5) +\r\n      geom_point(data = avg_duration_conditions, aes(x = clutter_group, y = avg_duration, shape = clutter_group, color = step_type), \r\n                 size = 3) +\r\n      geom_segment(data = slope_data, aes(x = 1, xend = 2, y = WithoutClutter, yend = WithClutter, color = step_type), \r\n                   size = 1) +\r\n      scale_shape_manual(values = c(\"Open\" = 17, \"Cluttered\" = 16)) +\r\n      scale_color_manual(values = c(\"One Step\" = \"red\", \"Two Steps\" = \"blue\")) +\r\n      scale_x_discrete(limits = c(\"Open\", \"Cluttered\")) +\r\n      labs(title = \"Time to Solve Puzzle in Different Conditions\",\r\n           x = \"\",\r\n           y = \"Time to Solve (seconds)\",\r\n           shape = \"Desk\",\r\n           color = \"Steps\") +\r\n      theme_minimal()\r\n  })\r\n  \r\n  ## ---------------- Controller Metrics ----------------\r\n  # Overall average left controller speed by participant\r\n  output$leftControllerSpeedPlot <- renderPlot({\r\n    motion_data_left <- LeftControllerData() %>%\r\n      group_by(participant_id) %>%\r\n      mutate(\r\n        delta_t = time - lag(time),\r\n        delta_x = pos_x - lag(pos_x),\r\n        delta_y = pos_y - lag(pos_y),\r\n        delta_z = pos_z - lag(pos_z),\r\n        speed = sqrt(delta_x^2 + delta_y^2 + delta_z^2) / delta_t,\r\n        participant_number = as.numeric(str_extract(participant_id, \"\\\\d+\"))\r\n      ) %>%\r\n      filter(!is.na(speed) & delta_t > 0)\r\n    average_speed_left <- motion_data_left %>%\r\n      group_by(participant_number) %>%\r\n      summarise(avg_speed = mean(speed, na.rm = TRUE))\r\n    ggplot(average_speed_left, aes(x = participant_number, y = avg_speed)) +\r\n      geom_point(size = 3, color = \"black\") +\r\n      labs(title = \"Average Left Controller Speed by Participant\",\r\n           x = \"Participant ID\",\r\n           y = \"Average Speed (m/s)\") +\r\n      theme_minimal() +\r\n      theme(axis.text.x = element_text(angle = 45, hjust = 1))\r\n  })\r\n  \r\n  # Overall average right controller speed by participant\r\n  output$rightControllerSpeedPlot <- renderPlot({\r\n    motion_data_right <- RightControllerData() %>%\r\n      group_by(participant_id) %>%\r\n      mutate(\r\n        delta_t = time - lag(time),\r\n        delta_x = pos_x - lag(pos_x),\r\n        delta_y = pos_y - lag(pos_y),\r\n        delta_z = pos_z - lag(pos_z),\r\n        speed = sqrt(delta_x^2 + delta_y^2 + delta_z^2) / delta_t,\r\n        participant_number = as.numeric(str_extract(participant_id, \"\\\\d+\"))\r\n      ) %>%\r\n      filter(!is.na(speed) & delta_t > 0)\r\n    average_speed_right <- motion_data_right %>%\r\n      group_by(participant_number) %>%\r\n      summarise(avg_speed = mean(speed, na.rm = TRUE))\r\n    ggplot(average_speed_right, aes(x = participant_number, y = avg_speed)) +\r\n      geom_point(size = 3, color = \"black\") +\r\n      labs(title = \"Average Right Controller Speed by Participant\",\r\n           x = \"Participant ID\",\r\n           y = \"Average Speed (m/s)\") +\r\n      theme_minimal() +\r\n      theme(axis.text.x = element_text(angle = 45, hjust = 1))\r\n  })\r\n  \r\n  ## ---------------- Rotational Analysis ----------------\r\n  # Left Controller Rotation – One-step (Conditions 0 vs 2)\r\n  output$leftRotationOneStepPlot <- renderPlot({\r\n    participants_list <- unique(LeftControllerData()$participant_id)\r\n    result <- map_dfr(participants_list, function(participant) {\r\n      participant_log <- MainLog() %>% \r\n        filter(participant_id == participant, trial_type %in% c(\"Condition: 0\", \"Condition: 2\"))\r\n      start_times_condition_0 <- participant_log$onset[participant_log$trial_type == \"Condition: 0\"]\r\n      end_times_condition_0 <- participant_log$end_timestamp[participant_log$trial_type == \"Condition: 0\"]\r\n      start_times_condition_2 <- participant_log$onset[participant_log$trial_type == \"Condition: 2\"]\r\n      end_times_condition_2 <- participant_log$end_timestamp[participant_log$trial_type == \"Condition: 2\"]\r\n      participant_motion_data <- LeftControllerData() %>% filter(participant_id == participant)\r\n      avg_speed_condition_0 <- calculate_rotational_speed_in_interval(participant_motion_data, start_times_condition_0, end_times_condition_0)\r\n      avg_speed_condition_2 <- calculate_rotational_speed_in_interval(participant_motion_data, start_times_condition_2, end_times_condition_2)\r\n      tibble(\r\n        participant_id = rep(as.numeric(str_extract(participant, \"\\\\d+\")), 2),\r\n        avg_speed = c(avg_speed_condition_0, avg_speed_condition_2),\r\n        condition = rep(c(\"Condition 0\", \"Condition 2\"), 1)\r\n      )\r\n    })\r\n    ggplot(result, aes(x = condition, y = avg_speed, group = participant_id)) +\r\n      geom_line() +\r\n      geom_point(size = 2) +\r\n      stat_summary(fun = mean, geom = \"point\", aes(group = 1), size = 5, color = \"red\") +\r\n      scale_x_discrete(labels = c(\"Condition 0\" = \"One-step without clutter\",\r\n                                  \"Condition 2\" = \"One-step with clutter\")) +\r\n      labs(title = \"Left Controller Rotational Speed (One-step)\",\r\n           x = \"Condition\",\r\n           y = \"Speed (°/s)\") +\r\n      theme_minimal() +\r\n      theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = \"none\")\r\n  })\r\n  \r\n  # Left Controller Rotation – Two-step (Conditions 1 vs 3)\r\n  output$leftRotationTwoStepPlot <- renderPlot({\r\n    participants_list <- unique(LeftControllerData()$participant_id)\r\n    result <- map_dfr(participants_list, function(participant) {\r\n      participant_log <- MainLog() %>% \r\n        filter(participant_id == participant, trial_type %in% c(\"Condition: 1\", \"Condition: 3\"))\r\n      start_times_condition_1 <- participant_log$onset[participant_log$trial_type == \"Condition: 1\"]\r\n      end_times_condition_1 <- participant_log$end_timestamp[participant_log$trial_type == \"Condition: 1\"]\r\n      start_times_condition_3 <- participant_log$onset[participant_log$trial_type == \"Condition: 3\"]\r\n      end_times_condition_3 <- participant_log$end_timestamp[participant_log$trial_type == \"Condition: 3\"]\r\n      participant_motion_data <- LeftControllerData() %>% filter(participant_id == participant)\r\n      avg_speed_condition_1 <- calculate_rotational_speed_in_interval(participant_motion_data, start_times_condition_1, end_times_condition_1)\r\n      avg_speed_condition_3 <- calculate_rotational_speed_in_interval(participant_motion_data, start_times_condition_3, end_times_condition_3)\r\n      tibble(\r\n        participant_id = rep(as.numeric(str_extract(participant, \"\\\\d+\")), 2),\r\n        avg_speed = c(avg_speed_condition_1, avg_speed_condition_3),\r\n        condition = rep(c(\"Condition 1\", \"Condition 3\"), 1)\r\n      )\r\n    })\r\n    ggplot(result, aes(x = condition, y = avg_speed, group = participant_id)) +\r\n      geom_line() +\r\n      geom_point(size = 2) +\r\n      stat_summary(fun = mean, geom = \"point\", aes(group = 1), size = 5, color = \"red\") +\r\n      scale_x_discrete(labels = c(\"Condition 1\" = \"Two-step without clutter\",\r\n                                  \"Condition 3\" = \"Two-step with clutter\")) +\r\n      labs(title = \"Left Controller Rotational Speed (Two-step)\",\r\n           x = \"Condition\",\r\n           y = \"Speed (°/s)\") +\r\n      theme_minimal() +\r\n      theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = \"none\")\r\n  })\r\n  \r\n  # Right Controller Rotation – One-step (Conditions 0 vs 2)\r\n  output$rightRotationOneStepPlot <- renderPlot({\r\n    participants_list <- unique(RightControllerData()$participant_id)\r\n    result <- map_dfr(participants_list, function(participant) {\r\n      participant_log <- MainLog() %>% \r\n        filter(participant_id == participant, trial_type %in% c(\"Condition: 0\", \"Condition: 2\"))\r\n      start_times_condition_0 <- participant_log$onset[participant_log$trial_type == \"Condition: 0\"]\r\n      end_times_condition_0 <- participant_log$end_timestamp[participant_log$trial_type == \"Condition: 0\"]\r\n      start_times_condition_2 <- participant_log$onset[participant_log$trial_type == \"Condition: 2\"]\r\n      end_times_condition_2 <- participant_log$end_timestamp[participant_log$trial_type == \"Condition: 2\"]\r\n      participant_motion_data <- RightControllerData() %>% filter(participant_id == participant)\r\n      avg_speed_condition_0 <- calculate_rotational_speed_in_interval(participant_motion_data, start_times_condition_0, end_times_condition_0)\r\n      avg_speed_condition_2 <- calculate_rotational_speed_in_interval(participant_motion_data, start_times_condition_2, end_times_condition_2)\r\n      tibble(\r\n        participant_id = rep(as.numeric(str_extract(participant, \"\\\\d+\")), 2),\r\n        avg_speed = c(avg_speed_condition_0, avg_speed_condition_2),\r\n        condition = rep(c(\"Condition 0\", \"Condition 2\"), 1)\r\n      )\r\n    })\r\n    ggplot(result, aes(x = condition, y = avg_speed, group = participant_id)) +\r\n      geom_line() +\r\n      geom_point(size = 2) +\r\n      stat_summary(fun = mean, geom = \"point\", aes(group = 1), size = 5, color = \"red\") +\r\n      scale_x_discrete(labels = c(\"Condition 0\" = \"One-step without clutter\",\r\n                                  \"Condition 2\" = \"One-step with clutter\")) +\r\n      labs(title = \"Right Controller Rotational Speed (One-step)\",\r\n           x = \"Condition\",\r\n           y = \"Speed (°/s)\") +\r\n      theme_minimal() +\r\n      theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = \"none\")\r\n  })\r\n  \r\n  # Right Controller Rotation – Two-step (Conditions 1 vs 3)\r\n  output$rightRotationTwoStepPlot <- renderPlot({\r\n    participants_list <- unique(RightControllerData()$participant_id)\r\n    result <- map_dfr(participants_list, function(participant) {\r\n      participant_log <- MainLog() %>% \r\n        filter(participant_id == participant, trial_type %in% c(\"Condition: 1\", \"Condition: 3\"))\r\n      start_times_condition_1 <- participant_log$onset[participant_log$trial_type == \"Condition: 1\"]\r\n      end_times_condition_1 <- participant_log$end_timestamp[participant_log$trial_type == \"Condition: 1\"]\r\n      start_times_condition_3 <- participant_log$onset[participant_log$trial_type == \"Condition: 3\"]\r\n      end_times_condition_3 <- participant_log$end_timestamp[participant_log$trial_type == \"Condition: 3\"]\r\n      participant_motion_data <- RightControllerData() %>% filter(participant_id == participant)\r\n      avg_speed_condition_1 <- calculate_rotational_speed_in_interval(participant_motion_data, start_times_condition_1, end_times_condition_1)\r\n      avg_speed_condition_3 <- calculate_rotational_speed_in_interval(participant_motion_data, start_times_condition_3, end_times_condition_3)\r\n      tibble(\r\n        participant_id = rep(as.numeric(str_extract(participant, \"\\\\d+\")), 2),\r\n        avg_speed = c(avg_speed_condition_1, avg_speed_condition_3),\r\n        condition = rep(c(\"Condition 1\", \"Condition 3\"), 1)\r\n      )\r\n    })\r\n    ggplot(result, aes(x = condition, y = avg_speed, group = participant_id)) +\r\n      geom_line() +\r\n      geom_point(size = 2) +\r\n      stat_summary(fun = mean, geom = \"point\", aes(group = 1), size = 5, color = \"red\") +\r\n      scale_x_discrete(labels = c(\"Condition 1\" = \"Two-step without clutter\",\r\n                                  \"Condition 3\" = \"Two-step with clutter\")) +\r\n      labs(title = \"Right Controller Rotational Speed (Two-step)\",\r\n           x = \"Condition\",\r\n           y = \"Speed (°/s)\") +\r\n      theme_minimal() +\r\n      theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = \"none\")\r\n  })\r\n  \r\n  ## ---------------- Raw Data ----------------\r\n  output$rawDataTable <- DT::renderDataTable({\r\n    DT::datatable(participants_data(), options = list(pageLength = 10))\r\n  })\r\n  \r\n}\r\n\r\n# Run the application\r\nshinyApp(ui, server)\r\n\r\n","type":"text"}]
